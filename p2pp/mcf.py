__author__ = 'Tom Van den Eede'
__copyright__ = 'Copyright 2018, Palette2 Splicer Post Processing Project'
__credits__ = ['Tom Van den Eede',
               'Tim Brookman'
               ]
__license__ = 'GPL'
__version__ = '1.0.0'
__maintainer__ = 'Tom Van den Eede'
__email__ = 'P2PP@pandora.be'
__status__ = 'Beta'

import struct
import os

#########################################
# Variable default values
#########################################

DEBUG_MODE = False
DEBUG_MODE_INPUT_FILE = '/Users/tomvandeneede/Desktop/Lego.gcode'

graphicalUserInterface = True  # WHAT DIS?

# Filament Transition Table
FilamentUsed = [False, False, False, False]
FilamentType = ["", "", "", ""]
FilamentName = ["Unnamed", "Unnamed", "Unnamed", "Unnamed"]
FilamentColor = ["-", "-", "-", "-"]
DefaultAlgorithm = "D000 D000 D000"
AlgorithmDict = {}
AlgorithmCount = 0

ProcessWarnings = ""
PrinterProfile = ''  # A unique ID linked to a printer configuration profile in the Palette 2 hardware.
AlgorithmList = []  # list of possible algorithms
OutputArray = []  # final output array with Gcode

# spliceoffset allows for a correction of the position at which the transition occurs.   When the first transition is scheduled
# to occur at 120mm in GCode, you can add a number of mm to push the transition further in the purge tower.  This serves a similar
# function as the transition offset in chroma
SpliceOffset = 0.0


# these  variables are used to build the splice information table (Omega-30 commands in GCode) that will drive the Palette2
SpliceLocation = []
SpliceTool = []
SpliceLength = []


# ping text is a text variable to store information about the PINGS generated by P2PP.   this information is pasted after
# the splice information right after the Palette2 header
PingLocation = []

# Hotswapcount is the number of hotswaps generated during the print.... not sure what this is used for, this variable is
# only used to complete the header
HotSwapCount = 0


# TotalExtrusion keeps track of the total extrusion in mm for the print taking into account the Extruder Multiplier set
# in the GCode settings.
TotalExtrusion = 0

# The next 3 variables are used to generate pings.   A ping is scheduled every ping interval.  The LastPing option
# keeps the last extruder position where a ping was generated.  It is set to -100 to pring the first PING forward...
# Not sure this is a good idea.   Ping distance increases over the print in an exponential way.   Each ping is 1.03 times
# further from the previous one.   Pings occur in random places!!! as the are non-intrusive and don't causes pauses in the
# print they aren ot restricted to the wipe tower and they will occur as soon as the interval length for ping is exceeded.
LastPing = -100
PingInterval = 350
PingExp = 1.03


# currenttool/lastLocation are variables required to generate O30 splice info.   splice info is generated at the end of the tool path
# and not at the start hence the requirement to keep the toolhead and lastlocation to perform the magic
currenttool = -1
LastLocation = 0

Layer = "No Layer Info"  # Capture layer information for short splice texts
extrusionMultiplier = 0.95  # Monitors M221 commands during the print.  Default is 0.95 (default in MK3 Firmware)
extraFilament = 150  # Provide extra filament at the end of the print.
minimalSpliceLength = 80  # Minimum overall splice length.
minimalStartSpliceLength = 100  # Minimum first splice length.
ToolChange = False  # keeps track if the processed G-Code is part of a toolchange or a regular path.
FilInfo = False  # TBA


# HexifyShort is used to turn a short integer into the specific notation used by Mosaic
def HexifyShort(num):
    return "D" + '{0:04x}'.format(num)


# HexifyLong is used to turn a 32-bit integer into the specific notation used by Mosaic
def HexifyLong(num):
    return "D" + '{0:08x}'.format(num)


# HexifyFloat is used to turn a 32-but floating point number into the specific notation used by Mosaic
def HexifyFloat(f):
    return "D" + (hex(struct.unpack('<I', struct.pack('<f', f))[0]))[2:]

#################################################################
########################## COMPOSE WARNING BLOCK ################
#################################################################


def LogWarning(text):
    global ProcessWarnings
    ProcessWarnings += text + "\n"


# ################################################################
# ######################### ALGORITHM PROCESSING ################
# ################################################################


def CreateProfileString(heating, compression, cooling):
    return "{} {} {}".format(HexifyShort(int(heating)),
                             HexifyShort(int(compression)),
                             HexifyShort(int(cooling))
                             )


def ProcessMaterial(splice_info):
    global DefaultAlgorithm, AlgorithmDict

    fields = splice_info.split("_")
    numfields = len(fields)

    if fields[0] == "DEFAULT" and numfields == 4:
        DefaultAlgorithm = CreateProfileString(fields[1], fields[2], fields[3])

    if numfields == 5:
        key = "{}-{}".format(fields[0], fields[1])
        AlgorithmDict[key] = CreateProfileString(fields[2], fields[3], fields[4])


def RetrieveAlgorithm(key):
    global ProcessWarnings
    try:
        return AlgorithmDict[key]
    except:
        LogWarning("WARNING: No Algorithm defined for transitioning {}.  Using Default.".format(key))
        return DefaultAlgorithm


def Algorithms():
    global AlgorithmList
    for i in range(4):
        for j in range(4):
            if (i == j) or not FilamentUsed[i] or not FilamentUsed[j]:
                continue
            key = "{}-{}".format(FilamentType[i], FilamentType[j])
            AlgorithmList.append("D{}{} {}".format(i+1,
                                                   j+1,
                                                   RetrieveAlgorithm(key)
                                                   )
                                 )


# ############################################################################
# # Generate O30 Commands for color switches
# ############################################################################

def SwitchColor(newTool, Location, splice_offset):
    global currenttool, LastLocation
    global FilamentUsed, Layer
    global SpliceLocation, SpliceTool, SpliceLength

    # some commands are generated at the end to unload filament, they appear as a reload of current filament - messing up things
    if newTool == currenttool:
        return

    Location += splice_offset


    if newTool == -1:
        Location += extraFilament
    else:
        FilamentUsed[newTool] = True

    Length = Location - LastLocation

    if currenttool != -1:
        SpliceLocation.append(Location)
        SpliceLength.append(Length)
        SpliceTool.append(currenttool)

        if len(SpliceLocation)==1:
            if SpliceLength[0] < minimalStartSpliceLength:
                LogWarning(";Warning : Short first splice (<{}mm) Length:{}\n".format(Length, minimalStartSpliceLength))
        else:
            if SpliceLength[-1] < minimalSpliceLength:
                LogWarning(";Warning: Short splice (<{}mm) Length:{} Layer:{} Tool:{}\n".format(minimalSpliceLength, Length, Layer, currenttool))

    LastLocation = Location
    currenttool = newTool



# keep track of the filaments that are used throughout the print.
# This information is stored in the header of the file
def FilamentUsage():
    result = "O25 "
    # all filament is type 1 for now, need to work on including type info in Slic3r
    for i in range(4):
        if FilamentUsed[i]:
            if FilamentType[i] == "":
                LogWarning("Filament #{} is missing Material Type, make sure to add ;P2PP FT=[filament_type] to filament GCode".format(i))
            if FilamentName[i] == "Unnamed":
                LogWarning("Filament #{} is missing Name, make sure to add ;P2PP FN=[filament_preset] to filament GCode".format(i))
            if FilamentName[i] == "-":
                LogWarning("Filament #{} is missing Color info, make sure to add ;P2PP FC=[extruder_colour] to filament GCode".format(i))
                FilamentName[i] = '000000'
            result += "D{}{}{} ".format(i+1,
                                        FilamentColor[i],
                                        FilamentName[i]
                                        )
        else:
            result += "D0 "

    return result+"\n"


# Generate the Omega - Header that drives the Palette to generate filament
def OmegaHeader(Name, splice_offset):

    if PrinterProfile == '':
        LogWarning("Printerprofile identifier is missing, add ;P2PP PRINTERPROFILE=<your printer profile ID> to the Printer Start GCode block")
    if len(SpliceLocation) == 0:
        LogWarning("This does not look lie a multi color file......")

    Algorithms()

    header = []
    summary = []
    warnings = []
    header.append('O21 ' + HexifyShort(20) + "\n")  # MSF2.0
    header.append('O22 D' + PrinterProfile + "\n")  # printerprofile used in Palette2
    header.append('O23 D0001' + "\n")              # unused
    header.append('O24 D0000' + "\n")              # unused

    header.append(FilamentUsage())

    header.append('O26 ' + HexifyShort(len(SpliceLocation)) + "\n")
    header.append('O27 ' + HexifyShort(len(PingLocation)) + "\n")
    header.append('O28 ' + HexifyShort(len(AlgorithmList)) + "\n")
    header.append('O29 ' + HexifyShort(HotSwapCount) + "\n")

    for i in range(len(SpliceLocation)):
        header.append("O30 D{:0>1d} {}\n".format(SpliceTool[i],
                                                 HexifyFloat(SpliceLocation[i])
                                                 )
                      )

    for i in range(len(AlgorithmList)):
        header.append("O32 {}\n".format(AlgorithmList[i]))

    if len(SpliceLocation) > 0:
        header.append("O1 D{} {}\n".format(Name, HexifyFloat(SpliceLocation[-1])))
    else:
        header.append("O1 D{} {}\n".format(Name, HexifyFloat(TotalExtrusion + splice_offset)))

    header.append("M0\n")
    header.append("T0\n")

    summary.append(";------------------:\n")
    summary.append(";SPLICE INFORMATION:\n")
    summary.append(";------------------:\n")
    summary.append(";       Splice Offset = {:-8.2f}mm\n\n".format(splice_offset))

    for i in range(len(SpliceLocation)):
        summary.append(";{:04}   Tool: {}  Location: {:-8.2f}mm   length {:-8.2f}mm \n".format(i+1,
                                                                                               SpliceTool[i],
                                                                                               SpliceLocation[i],
                                                                                               SpliceLength[i]
                                                                                               )
                      )

    summary.append("\n")
    summary.append(";------------------:\n")
    summary.append(";PING  INFORMATION:\n")
    summary.append(";------------------:\n")

    for i in range(len(PingLocation)):
        summary.append("Ping {:04} at {:-8.2f}mm\n".format(i+1,
                                                           PingLocation[i]
                                                           )
                       )

    warnings.append("\n")
    warnings.append(";------------------:\n")
    warnings.append(";PROCESS WARNINGS:\n")
    warnings.append(";------------------:\n")

    if ProcessWarnings == "":
        warnings.append("None")
    else:
        warnings.append(ProcessWarnings)
        warnings.append("\n;Processed by P2PP version {}\n".format(__version__))

    return {'header': header, 'summary': summary, 'warnings': warnings}


# Gcode remove speed information from a G1 statement
def gcodeRemoveSpeed(gcode):
    result = ""
    parts = gcode.strip("\n").split(" ")

    for subcommand in parts:
        if subcommand == "":
            continue
        if subcommand[0] != "F":
            result += subcommand+" "

    if len(result) < 4:
        return ";P2PP Removed "+gcode

    return result+"\n"


# G Code parsing routine
def ParseGCodeLine(splice_offset, gcodeFullLine):
    global TotalExtrusion,extrusionMultiplier, Layer, PrinterProfile
    global LastPing, PingExp, PingInterval
    global ToolChange, CurrentTool, ToolChange, FilInfo
    global minimalStartSpliceLength, minimalSpliceLength, OutputArray

    if len(gcodeFullLine) < 2:
        return {'gcode': gcodeFullLine, 'splice_offset': splice_offset}

    gcodeCommand2 = gcodeFullLine[0:2]
    gcodeCommand4 = gcodeFullLine[0:4]

    # Processing of extrusion multiplier commands
    #############################################
    if gcodeCommand4 == "M221":
        for part in gcodeFullLine.split(" "):
            if part == "":
                continue
            if part[0] == 'S':
                extrusionMultiplier = float(part[1:])/100

    # Processing of Extruder Movement commands
    # and generating ping at threshold intervals
    #############################################
    if gcodeCommand2 == "G1":
        for part in gcodeFullLine.split(" "):
            if part == "":
                continue
            if part[0] == 'E':
                offsetE = part[1:]

                TotalExtrusion += float(offsetE) * extrusionMultiplier

                if (TotalExtrusion - LastPing) > PingInterval:
                    PingInterval = PingInterval * PingExp

                    if PingInterval > 1000:
                        PingInterval = 1000
                    LastPing = TotalExtrusion
                    PingLocation.append(LastPing)
                    OutputArray.append(";Palette 2 - PING\nG4 S0\nO31 "+HexifyFloat(LastPing))
                    OutputArray.append("M117 PING {:03} {:-8.2f}mm\n\n".format(len(PingLocation), LastPing))

    # Process Toolchanges. Build up the O30 table with Splice info
    ##############################################################
    if gcodeFullLine[0] == 'T':
        newTool = int(gcodeFullLine[1])
        SwitchColor(newTool, TotalExtrusion, splice_offset)
        FilInfo = True
        return {'gcode': ';P2PP removed ' + gcodeFullLine, 'splice_offset': splice_offset}

    # Build up the O32 table with Algo info
    #######################################
    if gcodeFullLine.startswith(";P2PP FT=") and FilInfo:  # filament type information
        FilamentType[currenttool] = gcodeFullLine[9:].rstrip("\n")

    if gcodeFullLine.startswith(";P2PP FN=") and FilInfo:  # filament color information
        p2ppinfo = gcodeFullLine[9:].strip("\n-+!@#$%^&*(){}[];:\"\',.<>/?").replace(" ", "_")
        FilamentName[currenttool] = p2ppinfo

    if gcodeFullLine.startswith(";P2PP FC=#") and FilInfo:  # filament color information
        p2ppinfo = gcodeFullLine[10:].rstrip("\n")
        FilamentColor[currenttool] = p2ppinfo

    # Other configuration information
    # this information should be defined in your Slic3r printer settings, startup GCode
    ###################################################################################
    if gcodeFullLine.startswith(";P2PP PRINTERPROFILE=") and PrinterProfile == '':   # -p takes precedence over printer defined in file
        PrinterProfile = gcodeFullLine[21:].rstrip("\n")

    if gcodeFullLine.startswith(";P2PP SPLICEOFFSET="):
        splice_offset = float(gcodeFullLine[19:].rstrip("\n"))

    if gcodeFullLine.startswith(";P2PP MINSTARTSPLICE="):
        minimalStartSpliceLength = float(gcodeFullLine[21:].rstrip("\n"))
        if minimalStartSpliceLength < 100:
            minimalStartSpliceLength = 100

    if gcodeFullLine.startswith(";P2PP MINSPLICE="):
        minimalSpliceLength = float(gcodeFullLine[16:].rstrip("\n"))
        if minimalSpliceLength < 40:
            minimalSpliceLength = 40

    if gcodeFullLine.startswith(";P2PP MATERIAL_"):
        ProcessMaterial(gcodeFullLine[15:].rstrip("\n"))

    # Next section(s) clean up the GCode generated for the MMU
    # specially the rather violent unload/reload required for the MMU2
    ###################################################################
    if "TOOLCHANGE START" in gcodeFullLine:
        FilInfo = False
        ToolChange = True
    if "TOOLCHANGE END" in gcodeFullLine:
        ToolChange = False
    if "TOOLCHANGE UNLOAD" in gcodeFullLine:
        OutputArray.append(";P2PP Set Wipe Speed\nG1 F2000\n")

    # Layer Information
    if gcodeFullLine.startswith(";LAYER "):
        Layer = gcodeFullLine[7:].strip("\n")
        return {'gcode': gcodeFullLine, 'splice_offset': splice_offset}

    if ToolChange:
        return {'gcode': tool_change(gcodeFullLine, gcodeCommand2, gcodeCommand4), 'splice_offset': splice_offset}

    # Catch All
    return {'gcode': gcodeFullLine, 'splice_offset': splice_offset}

def tool_change(line, gcode_command_2, gcode_command_4):
    # --------------------------------------------------------------
    # Do not perform this part of the GCode for MMU filament unload
    # --------------------------------------------------------------
    discarded_moves = ["E-15.0000",
                       "G1 E10.5000",
                       "G1 E3.0000",
                       "G1 E1.5000"
                       ]

    if gcode_command_2 == "G1":
        for gcode_filter in discarded_moves:
            if gcode_filter in line:         # remove specific MMU2 extruder moves
                return ";P2PP removed "+line
        return gcodeRemoveSpeed(line)

    if gcode_command_4 == "M907":
        return ";P2PP removed " + line   # remove motor power instructions

    if gcode_command_4 == "M220":
        return ";P2PP removed " + line   # remove feedrate instructions

    if line.startswith("G4 S0"):
        return ";P2PP removed " + line   # remove dwelling instructions

    return line


def generate(input_file, output_file, printer_profile, splice_offset, silent):
    global PrinterProfile
    PrinterProfile = printer_profile
    # read the input file
    ###################
    basename = os.path.basename(input_file)
    _taskName = os.path.splitext(basename)[0]

    with open(input_file) as opf:
        gcode_file = opf.readlines()
    # opf.close   # Not required.

    # Process the file
    ##################
    for line in gcode_file:
        # ParseGCodeLine now returns splice_offset from print file if it exists, keeping everything consistent.
        # splice_offset from gcode takes precedence over splice_offset from CLI.
        result = ParseGCodeLine(splice_offset, line)
        splice_offset = float(result['splice_offset'])
        OutputArray.append(result['gcode'])
    SwitchColor(-1, TotalExtrusion, splice_offset)
    omega_result = OmegaHeader(_taskName, splice_offset)
    header = omega_result['header'] + omega_result['summary'] + omega_result['warnings']

    if not silent:
        print ''.join(omega_result['summary'])
        print ''.join(omega_result['warnings'])

    # write the output file
    ######################
    if not output_file:
        output_file = input_file
    opf = open(output_file, "w")
    opf.writelines(header)
    opf.writelines(OutputArray)
